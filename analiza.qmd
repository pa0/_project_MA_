---
title: "Meta-analysis"
---

```{r}
library(tidyverse)
library(knitr)
library(metafor)
library()
library(conflicted)
conflict_prefer(dplyr::select, quiet = T)
conflict_prefer(dplyr::filter, quiet = T)
```


```{r}
# wczytanie danych
load("data/data.Rda")
#glimpse(data)
```


```{r}
# ============================ Agregowane wartości ============================= #
data |> 
  mutate(
    waga = 1 / as.numeric(SE)^2,
    iloczyn = as.numeric(SMD) * waga) |> 
  group_by(lab) |>
    summarise(
      aSMD = sum(iloczyn)/ sum(waga),
      aSE = sqrt(1 / sum(waga))
      ) |> 
  select(lab, aSMD, aSE)

# Parametr korelacji między efektami w obrębie artykułu
rho <- 0.6  # założona korelacja (możesz przetestować kilka wartości)

names(data$test_list.stat) %>% table
data %>%
  janitor::tabyl(test_list.stat)

```

Wielkości efektów
==================

```{r}

data1.2 = data %>%
  relocate(c(n, n_prosoc, n_con), .after = test_list)

# 0 - n = n1 + n2, n1 = n2
# 1 - n = n1 + n2, n1 != n2 
# 2 - n = n1, n2 = NA
# 3 - n != n1 + n2 
# 4 - n1 = n2 = NA

# do przypadku 3
data = data %>%
  mutate(across(starts_with('n_'), ~ ifelse(str_starts(cite, 'tountopoulou2021training'), n/2, .)))     # z artykułu wynika, że raczej n1 = n2 = n/2

# do przypadku 4
data = data %>%                                                                
    mutate(across(starts_with('n_'), ~ ifelse(cite == 'shaza2021impact_a', n/2, .))) %>%
    rows_update(data.frame(cite = 'charewicz2019effects_b', n = 103, n_prosoc = round(103 * 51 / 106), n_con = round(103 * 55 / 106)), by = 'cite') # z df w tekście wynika, że odrzucono 3 osoby, ale nie z których grup, więc zakładam proporcjonalnie
# #pozostałe przypadki 4 są całe testy i statystyki do uzupełnienia#

# dla przypadku 2
data = data %>%                                                                
    mutate(test_list.stat = structure(ifelse(cite == 'morschheuser2017how_a', unname(effect_size / ((test_list.stat_2 - effect_size)/qt(0.975, n - 3))), test_list.stat), # chyba dobry test jest (β = 0.476, p < 0.001 (i chyba bet jest 3), ale tu brakuje SE
                                      names = ifelse(cite == 'morschheuser2017how_a', 't', names(test_list.stat))),
           test_list.stat_2 = NULL,
           n_con = ifelse(!is.na(n_con) & is.na(n_prosoc), NA, n_con))
  
# ogólne poprawy
data = data %>%
  mutate(n = case_when(cite == 'wu2019promoting_a'            ~ 131, # PK: dlaczego? grały tylko osoby z 2 grup 28+34 # AS: a nie powinno się brać wszystkich i 69 z wideo jako kontrolną? Zmienna x nie wyraża właśnie przynależności do grupy?
                       cite == 'lobel2016relation_a'          ~ 184,
                       cite == 'parsons2019prosocial_a'       ~ 71,
                       cite == 'parsons2018validation_a'      ~ 76,
                       cite == 'parsons2018validation_b'      ~ 109,
                       cite == 'jin2017when_c'                ~ 96,
                       cite == 'badatala2016effects_a'        ~ 30,
                       cite == 'kaufman2015psychologically_c' ~ 32,
                       TRUE                                   ~ n)) %>%
  rows_update(data.frame(cite      = c('wu2019promoting_a', 'jin2017when_c', 'badatala2016effects_a', 'kaufman2015psychologically_a', 'kaufman2015psychologically_c', 'boduszek2019prosocial_a', 'boduszek2019prosocial_b'),
                         n_con     = c(69, 48, 15, 18, 16, 86, 86),
                         n_prosoc  = c(62, 48, 15, 19, 16, 86, 86)), by = 'cite') %>%
  rows_update(data.frame(cite      = c('shaza2021impact_a', 'kaufman2015psychologically_c'),
                         m_con     = (53.66 + 55.45)/2,
                         sd_con    = (18.14 + 19.16)/2,
                         m_prosoc  = (63.46 + 67.62)/2,
                         sd_prosoc = c((20.83 + 18.08)/2, 1.09)), by = 'cite') %>%
  mutate(test_list.se   = if_else(cite == 'wu2019promoting_a', c('se' = 0.07), test_list.se),
         test_list.stat = structure(case_when(cite %in% c('wu2019promoting_a', 'shoshani2023from_a', 'shoshani2023from_b', 'shoshani2021video_a')
                                                                                                          ~ effect_size/test_list.se,
                                              cite == 'lobel2016relation_a'                               ~ sign(effect_size) * qt(1 - test_list.p/2, n - 9),
                                              cite == 'eriksson2021behavioral_a'                          ~ -2.94,
                                              TRUE                                                        ~ test_list.stat),
                                    names = ifelse(cite %in% c('wu2019promoting_a', 'shoshani2023from_a', 'shoshani2023from_b', 'shoshani2021video_a', 'lobel2016relation_a', 'eriksson2021behavioral_a'), 't', names(test_list.stat)))) %>%
  mutate(sd_Y = case_when(cite == 'wu2019promoting_a'     ~ test_list.se * sqrt(n_con * n_prosoc / (n_con + n_prosoc)),
                          cite == 'shoshani2023from_a'    ~ 0.99,
                          cite == 'shoshani2023from_b'    ~ 2.34, 
                          cite == 'verheij2020friendly_a' ~ 0.55),
         sd_X = if_else(cite == 'verheij2020friendly_a', 1.4, NA),
         .after = 'effect_size') %>%
  mutate(effect_size = if_else(cite == 'verheij2020friendly_a', effect_size * sd_X/sd_Y, effect_size),
         effect_coef = if_else(cite %in% c('wu2019promoting_a', 'shoshani2023from_a', 'shoshani2023from_b'), 'b', effect_coef))
  
```


```{r}

# dla przypadków 0,1,2 (w tym 3,4) 
data = data %>%
  mutate(test_stat = case_when(effect_coef %in% c('r', 'beta', 'b') ~ effect_coef,
                               !is.na(test_list.stat) ~ names(test_list.stat)),
         SMD_R = case_when(test_stat == 'r' | test_stat == 'beta'              ~ esc::esc_rpb(effect_size, totaln = n)$es,     
                           test_stat == 'b'                                    ~ esc::esc_B(effect_size, sdy = sd_Y, grp1n = n_prosoc, grp2n = n_con)$es, 
                           if_all(matches('(_con|_prosoc)$'), ~ !is.na(.x))    ~ metaConvert::es_from_means_sd(m_prosoc, sd_prosoc, m_con, sd_con, n_prosoc, n_con)$d, 
                           if_all(matches('^(m|sd)(.*)(_prosoc|_con)$'), ~ !is.na(.x)) ~ metaConvert::es_from_means_sd(m_prosoc, sd_prosoc, m_con, sd_con, n, n)$d, 
                           n_con != n_prosoc & test_stat == 't'                ~ esc::esc_t(test_list.stat, grp1n = n_prosoc, grp2n = n_con)$es,  
                           n_con != n_prosoc & test_stat == 'f'                ~ esc::esc_f(test_list.stat, grp1n = n_prosoc, grp2n = n_con)$es,               
                           n_con != n_prosoc & test_stat == 'chi'              ~ esc::esc_rpb(effectsize::chisq_to_phi(abs(test_list.stat), n = n, adjust = F)$phi, grp1n = n_prosoc, grp2n = n_con)$es,  
                           n_con == n_prosoc & test_stat == 'z'                ~ effectsize::z_to_d(test_list.stat, n = n)$d,
                           n_con == n_prosoc & test_stat == 't'                ~ esc::esc_t(test_list.stat, totaln = n)$es,     
                           n_con == n_prosoc & test_stat == 'f'                ~ esc::esc_f(test_list.stat, totaln = n)$es,                                    
                           n_con == n_prosoc & test_stat == 'chi'              ~ esc::esc_chisq(test_list.stat, totaln = n)$es,
                           is.na(n_con) & is.na(n_prosoc) & test_stat == 't'   ~ esc::esc_t(test_list.stat, totaln = n)$es,
                           is.na(n_con) & is.na(n_prosoc) & test_stat == 'chi' ~ effectsize::oddsratio_to_d(max(c((38 + 14)/(23 + 10)), (23 + 10)/(38 + 14)))), # z OR = max(b/c, c/b) z tabeli krzyżowej           
         SMD_R = ifelse(cite %in% c('beene2015effect_a', 'gordon2018powering_a', 'coyne2016super_a', 'coyne2016super_b'), NA, SMD_R)) %>%  
  relocate(SMD, SMD_calc, .after = 'SMD_R')

```


```{r}

cor.test(abs(data$SMD_R), abs(data$SMD))       # korelacja 0.92
#cor.test(abs(data$SMD_R), abs(data$SMD_calc))

# Funkcja pomocnicza do budowy bloku macierzy kowariancji dla jednego artykułu
make_block <- function(vi, rho) {
  m <- length(vi)
  mat <- matrix(rho, nrow = m, ncol = m)
  diag(mat) <- 1
  outer_sqrt <- outer(sqrt(vi), sqrt(vi))
  mat * outer_sqrt
}

# Budowa pełnej macierzy V (blokowo po artykułach)
V_list <- lapply(split(your_data, your_data$article_id), function(df) {
  make_block(df$vi, rho)
})
V_mat <- as.matrix(bdiag(V_list))  # macierz blokowa

# Model z macierzą kowariancji
model <- rma.mv(yi, V = V_mat, random = ~ 1 | article_id/effect_id, data = your_data)
data %>% 
  mutate(SMD_R_var = case_when(test_stat == 'r' | test_stat == 'beta'                      ~ 4/((1 - effect_size**2) * (n - 1)),    
                               test_stat == 'b'                                            ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n,
                               if_all(matches('(_con|_prosoc)$'), ~ !is.na(.x))            ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n,
                               if_all(matches('^(m|sd)(.*)(_prosoc|_con)$'), ~ !is.na(.x)) ~ 2/n + SMD_R**2/(4 * n),                               
                               n_con != n_prosoc & test_stat == 't'                        ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n,
                               n_con != n_prosoc & test_stat == 'f'                        ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n,            
                               n_con != n_prosoc & test_stat == 'chi'                      ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n, # ? - kor. potraktowana punkt.-dwuser., więc typowy wzór chyba adekwatniejszy niż z chi
                               n_con == n_prosoc & test_stat == 'z'                        ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n,
                               n_con == n_prosoc & test_stat == 't'                        ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n,     
                               n_con == n_prosoc & test_stat == 'f'                        ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/2/n,                                   
                               n_con == n_prosoc & test_stat == 'chi'                      ~ SMD_R**2/abs(test_list.stat),
                               is.na(n_con) & is.na(n_prosoc) & test_stat == 'chi'         ~ (1/(38 + 14) + 1/(23 + 10)) * 3/pi**2))

data = data %>% 
  mutate(SMD_var  = case_when(test_stat == 'r' | test_stat == 'beta'              ~ 4/((1 - effect_size**2) * (n - 1)),
                              n_con == n_prosoc & test_stat == 'chi'              ~ SMD_R**2/abs(test_list.stat),
                              is.na(n_con) & is.na(n_prosoc) & test_stat == 'chi' ~ (1/(38 + 14) + 1/(23 + 10)) * 3 / pi**2,
                              !is.na(n_con) & !is.na(n_prosoc)                    ~ (n_con + n_prosoc)/(n_con * n_prosoc) + SMD_R**2/(2 * n),
                              !is.na(SMD_R)                                       ~ 2/n + SMD_R**2/(4 * n)),
         SMD_se     = sqrt(SMD_var),
         W_var      = 1 / SMD_var,
         W_n        = case_when(!is.na(n_con) & !is.na(n_prosoc) ~ n,
                                is.na(n_con) & is.na(n_prosoc)   ~ n * 2),           # ? - mogę tu tak zignorować, że to zależne? [nieistotne - i tak tego nie używam]
         SMD_W_var  = SMD_R * W_var,
         SMD_W_n    = SMD_R * W_n,
         SMD2_W_var = SMD_R**2 * W_var,
         SMD2_W_n   = SMD_R**2 * W_n,
         W2_var     = W_var**2,
         W2_n       = W_n**2) 
         
# Komponenty wariancji
tau2_between <- model$sigma2[1]
tau2_within  <- model$sigma2[2]
mean_vi <- mean(your_data$vi)

# I²
I2_between <- tau2_between / (tau2_between + tau2_within + mean_vi)
I2_within  <- tau2_within  / (tau2_between + tau2_within + mean_vi)

```{r}
cor.test(abs(data$SMD_var), abs(data$v))               # korelacja 0.61

cat("I² między artykułami: ", round(100 * I2_between, 2), "%\n")
cat("I² wewnątrz artykułów:", round(100 * I2_within, 2), "%\n")
```


```{r}
(met = metafor::rma(yi = abs(data$SMD_R), vi = data$SMD_var, slab = data$cite))  # SMD = 0.41, słaby związek
confint(met)
as.matrix(predict(met))

```

```{r}
metafor::radial(met)
```


```{r}
metafor::baujat(met)
```


```{r}
metafor::forest(met)
```


```{r}
metafor::funnel(met)
```


```{r}
metafor::regtest(met)
```


```{r}
metafor::ranktest(met) 
```

```{r}
influence(met) %>% 
  print() %>%
  arrange(-dfbs)
```


```{r}
plot(influence(met))
```


